<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="MINING_COLLECTOR">

    <resultMap type="HashMap" id="tmptContentMap">
        <result property="CONTENT" column="CONTENT" jdbcType="CLOB" javaType="java.lang.String" />
        <result property="TMPT_FUNC" column="TMPT_FUNC" jdbcType="CLOB" javaType="java.lang.String" />
        <result property="TMPT_COMMENT" column="TMPT_COMMENT" jdbcType="CLOB" javaType="java.lang.String" />
    </resultMap>

    <select id="GET_MINING_COLLECTOR_LIST" parameterType="hashmap" resultType="hashmap" >
        /* 수집대상관리 리스트조회 */
		SELECT 
			Y.RNUM,
			Y.ID,
			Y.SOURCE_NAME,
			(SELECT VALUE FROM CODE_VALUE CV WHERE CLASS_CODE = '001' AND CODE = Y.SOURCE_TYPE ) AS SOURCE_TYPE,
			(SELECT VALUE FROM CODE_VALUE CV WHERE CLASS_CODE = '002' AND CODE = Y.SERVICE_TYPE ) AS SERVICE_TYPE,
			Y.SOURCE_INTRO,
			Y.ACTIVE_STOP_REASON,
			Y.ACTIVE_YN,
			(SELECT VALUE FROM CODE_VALUE CV WHERE CLASS_CODE = '016' AND CODE = Y.COLLECT_STATUS ) AS COLLECT_STATUS,
			Y.REMARK,
			TO_CHAR(Y.REG_DATE, 'YYYY-MM-DD') REG_DATE,
			Y.WORKER_ID,
			TO_CHAR(Y.LAST_COLLECT_DATE, 'YYYY-MM-DD') LAST_COLLECT_DATE
			<!-- Y.PLAY_TYPE  -->                       
		FROM(
		        SELECT 
		            ROWNUM as RNUM,
		            X.*
		        FROM
		            (
		                SELECT 
		                    Z.*
		                FROM
		                    VIDEO_MINING_COLLECTOR Z
		                   <include refid="search_query" />
		                ORDER BY SOURCE_NAME ASC
		            ) X    
		        WHERE ROWNUM <![CDATA[<=]]> #{currpage} * #{displaycnt}
		    ) Y
		WHERE RNUM  <![CDATA[>]]> (#{currpage} - 1 ) * #{displaycnt}
	</select>
    
    <select id="GET_MINING_COLLECTOR_LIST_EXCEL" parameterType="hashmap" resultType="hashmap" >
        /* 수집대상관리 엑셀 출력 */
		SELECT 
			Y.RNUM,
			Y.SOURCE_NAME,
			Y.SOURCE_INTRO,
			(SELECT VALUE FROM CODE_VALUE CV WHERE CLASS_CODE = '001' AND CODE = Y.SOURCE_TYPE ) AS SOURCE_TYPE,
			(SELECT VALUE FROM CODE_VALUE CV WHERE CLASS_CODE = '002' AND CODE = Y.SERVICE_TYPE ) AS SERVICE_TYPE,
			(SELECT VALUE FROM CODE_VALUE CV WHERE CLASS_CODE = '016' AND CODE = Y.COLLECT_STATUS ) AS COLLECT_STATUS,
			TO_CHAR(Y.LAST_COLLECT_DATE, 'YYYY-MM-DD') LAST_COLLECT_DATE,
			Y.REMARK
		FROM(
		        SELECT 
		            ROWNUM as RNUM,
		            X.*
		        FROM
		            (
		                SELECT 
		                    Z.*
		                FROM
		                    VIDEO_MINING_COLLECTOR Z
		                   <include refid="search_query" />
		                ORDER BY SOURCE_NAME ASC
		            ) X    
		    ) Y
	</select>    
    
    <select id="GET_MINING_COLLECTOR_INFO" parameterType="hashmap" resultType="hashmap" >
        /* 수집대상관리 정보조회 */
		SELECT 
			ID,
			SOURCE_URL,
			SOURCE_NAME,
			SOURCE_TYPE,
			SERVICE_TYPE,
			ACTIVE_STOP_REASON,
			ACTIVE_YN,
			REMARK,
			WORKER_ID,
			<!-- PLAY_TYPE,  -->
        	COLLECT_TYPE,
        	COLLECT_KEYWORD,
        	ORG_CODE,
        	SOURCE_INTRO
		FROM
			VIDEO_MINING_COLLECTOR
		WHERE 
			ID = #{id}
	</select>
   	
    
    <select id="GET_MINING_COLLECTOR_COUNT" parameterType="hashmap" resultType="int" >
        /* 수집대상관리 카운트조회 */
        SELECT 
        	COUNT(1) 
       	FROM 
        	VIDEO_MINING_COLLECTOR
       	<include refid = "search_query" />
	</select>
	
	<insert id="INSERT_MINING_COLLECTOR_INFO" parameterType="map">
        /* 수집대상관리 입력 */
        INSERT INTO VIDEO_MINING_COLLECTOR(
        	ID,
        	SOURCE_NAME, 
        	SOURCE_TYPE, 
        	SOURCE_URL, 
        	SERVICE_TYPE, 
        	ACTIVE_YN,
        	REMARK, 
        	REG_DATE,
        	WORKER_ID,
        	ACTIVE_STOP_REASON,
        	<!-- PLAY_TYPE,  -->
        	COLLECT_TYPE,
        	COLLECT_KEYWORD,
        	ORG_CODE,
        	SOURCE_INTRO
        )
        VALUES (
        	CLIV_SEQ.NEXTVAL,
	        #{source_name},
	        #{source_type},
	        #{source_url},
	        #{service_type},
	        #{active_yn},
	        #{remark, jdbcType=VARCHAR},
	        sysdate,
	        #{worker_id},
	        #{active_stop_reason, jdbcType=VARCHAR},
	        <!-- #{play_type, jdbcType=VARCHAR},  -->
	        #{collect_type, jdbcType=VARCHAR},
	        #{collect_keyword, jdbcType=VARCHAR},
	        #{org_code, jdbcType=VARCHAR},
	        #{source_intro, jdbcType=VARCHAR}
	    )
	</insert>
	
	
	<delete id="DELETE_MINING_COLLECTOR" parameterType="map">
		/* 수집대상관리 삭제 */
		DELETE FROM VIDEO_MINING_COLLECTOR
		WHERE ID = #{id}
	</delete>
	
	
	<update id="UPDATE_MINING_COLLECTOR" parameterType="map">
		/* 수집대상관리 수정 */
		UPDATE VIDEO_MINING_COLLECTOR 
		SET 
        	SOURCE_NAME = #{source_name}, 
        	SOURCE_TYPE = #{source_type}, 
        	SOURCE_URL = #{source_url}, 
        	SERVICE_TYPE = #{service_type}, 
        	ACTIVE_YN = #{active_yn},
        	REMARK = #{remark, jdbcType=VARCHAR}, 
        	ACTIVE_STOP_REASON = #{active_stop_reason, jdbcType=VARCHAR},
        	<!-- PLAY_TYPE = #{play_type}, --> 
        	LAST_UPDATE_DATE = sysdate,
        	COLLECT_TYPE = #{collect_type},
        	COLLECT_KEYWORD = #{collect_keyword},
        	WORKER_ID = #{worker_id},
        	ORG_CODE = #{org_code},
        	SOURCE_INTRO = #{source_intro}
        WHERE
			ID = #{id}
	</update>
	
    <select id="GET_MINING_COLLECTOR_LIST_ALL" parameterType="hashmap" resultType="hashmap" >
        /* 수집대상관리 셀렉트 박스조회 */
		SELECT 
			ID,
			SOURCE_NAME
		FROM
			VIDEO_MINING_COLLECTOR
		ORDER BY SOURCE_NAME ASC
	</select>

	<insert id="INSERT_REQUEST_COLLECTOR_QUEUE" parameterType="map">
        /* 데이터수집 큐 입력 */
        INSERT INTO REQUEST_COLLECTOR_QUEUE(
        	ID,
        	VMC_ID, 
        	COLLECT_STATUS,  
        	REQUEST_DATE, 
        	WORKER_ID
            )
        VALUES (
        	CLIV_SEQ.NEXTVAL,
	        #{id},
	        #{status},
			sysdate,
			#{worker_id}
			)
	</insert>

	<update id="UPDATE_COLLECT_STATUS" parameterType="map">
        /* 수집상태 변경 */
        UPDATE 
        	VIDEO_MINING_COLLECTOR
        SET 
        	COLLECT_STATUS = '01' 
        WHERE
        	ID = #{id}
    </update>

	<delete id="DELETE_CHANNEL_COLLECT_STAT" parameterType="map">
		/* 채널별 자료수집 통계 삭제 */
		DELETE FROM CHANNEL_COLLECT_STAT
		WHERE VMC_ID = #{id}
	</delete>
	<delete id="DELETE_TOP_VIDEO_LIST" parameterType="map">
		/* 채널별 인기동영상 삭제 */
		DELETE FROM TOP_VIDEO_LIST
		WHERE CVD_ID IN (SELECT ID FROM COLLECT_VIDEO_DATA WHERE VMC_ID = #{id})
	</delete>
	<delete id="DELETE_NEW_VIDEO_LIST" parameterType="map">
		/* 채널별 최근동영상 삭제 */
		DELETE FROM NEW_VIDEO_LIST
		WHERE CVD_ID IN (SELECT ID FROM COLLECT_VIDEO_DATA WHERE VMC_ID = #{id})
	</delete>
	<delete id="DELETE_VIEW_VIDEO_STAT" parameterType="map">
		/* 채널별 자료이용 통계 삭제 */
		DELETE FROM VIEW_VIDEO_STAT
		WHERE CVD_ID IN (SELECT ID FROM COLLECT_VIDEO_DATA WHERE VMC_ID = #{id})
	</delete>
	<delete id="DELETE_VIDEO_PLAYLIST_GROUP" parameterType="map">
		/* 채널별 재생목록 그룹 삭제 */
		DELETE FROM VIDEO_PLAYLIST_GROUP
		WHERE ID IN (
			SELECT VPG_ID FROM VIDEO_PLAYLIST WHERE CVD_ID IN(
				SELECT ID FROM COLLECT_VIDEO_DATA WHERE VMC_ID = #{id}
			)
		)
	</delete>
	<delete id="DELETE_VIDEO_PLAYLIST" parameterType="map">
		/* 채널별 재생목록 삭제 */
		DELETE FROM VIDEO_PLAYLIST
		WHERE CVD_ID IN( SELECT ID FROM COLLECT_VIDEO_DATA WHERE VMC_ID = #{id})
	</delete>
	<delete id="DELETE_CASE_LAW_INFO" parameterType="map">
		/* 채널별 사건번호정보 삭제 */
		DELETE FROM CASE_LAW_INFO
		WHERE ID IN( 
			SELECT CLI_ID FROM CASE_LAW_GROUP WHERE CVD_ID IN(
				SELECT ID FROM COLLECT_VIDEO_DATA WHERE VMC_ID = #{id}
			)
		)
	</delete>
	<delete id="DELETE_CASE_LAW_GROUP" parameterType="map">
		/* 채널별 사건연계정보 삭제 */
		DELETE FROM CASE_LAW_GROUP
		WHERE CVD_ID IN( 
			SELECT ID FROM COLLECT_VIDEO_DATA WHERE VMC_ID = #{id}
		)
	</delete>
	<delete id="DELETE_COLLECT_VIDEO_DATA" parameterType="map">
		/* 채널별 수집자료 삭제 */
		DELETE FROM COLLECT_VIDEO_DATA WHERE VMC_ID = #{id}
	</delete>
	
	
  	<sql id="search_query">
		<where>
			1 = 1
			<if test="(search_date_option != null and search_date_option != ''.toString()) and (start_date != null and end_date != null)">
				<choose>
					<when test="search_date_option == 'reg_date'" >
					AND REG_DATE
						BETWEEN 
							TO_DATE(#{start_date}, 'YYYY-MM-DD') + 0.00000 
						AND 
							TO_DATE(#{end_date}, 'YYYY-MM-DD') + 0.99999
					</when>
					<when test="search_date_option == 'last_col_date'">
					AND LAST_COLLECT_DATE
						BETWEEN 
							TO_DATE(#{start_date}, 'YYYY-MM-DD') + 0.00000 
						AND 
							TO_DATE(#{end_date}, 'YYYY-MM-DD') + 0.99999
					</when>
				</choose>
			</if>
			

			<choose>
				<when test="mining_active_yn != null and mining_active_yn == 'Y'.toString()">
					AND ACTIVE_YN = #{mining_active_yn}
				</when>
				<when test="mining_active_yn != null and mining_active_yn == 'N'.toString()">
					AND ACTIVE_YN = #{mining_active_yn}
				</when>
			</choose>
			<choose>
				<when test="collect_status != null and collect_status == '01'.toString()">
					AND COLLECT_STATUS = #{collect_status}
				</when>
				<when test="collect_status != null and collect_status == '02'.toString()">
					AND COLLECT_STATUS = #{collect_status}
				</when>
				<when test="collect_status != null and collect_status == '03'.toString()">
					AND COLLECT_STATUS = #{collect_status}
				</when>
				<when test="collect_status != null and collect_status == '04'.toString()">
					AND COLLECT_STATUS = #{collect_status}
				</when>
			</choose>

						
			<if test="search_date_option != null and search_date_option != ''.toString() and searchKeyword != null">
				<choose>
					<when test="search_type_option == 'source_name'">
						AND SOURCE_NAME LIKE '%' || #{searchKeyword} || '%'
					</when>
					<when test="search_type_option == 'source_intro'">
						AND SOURCE_INTRO LIKE '%' || #{searchKeyword} || '%'
					</when>
				</choose>
			</if>
			
		</where>
    </sql>
	
	
</mapper>