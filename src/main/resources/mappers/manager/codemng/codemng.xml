<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="CODE_MNG">

    <select id="GET_CC_LIST" parameterType="map" resultType="map">
        /* 클래스코드 리스트 조회 */
        SELECT
        	ROWNUM,
        	CC.CLASS_CODE,
        	CC.CLASS_DESC,
        	CC.USE_YN
        FROM
	        (
		       SELECT 
		       		CLASS_CODE,
		       		CLASS_DESC,
		       		USE_YN
		       FROM 
		       		CODE_CLASS 
		    	<if test="searchKeyword != null and !''.equals(searchKeyword)">
					WHERE CLASS_DESC LIKE '%' || #{searchKeyword} || '%'
				</if>	
		    	ORDER BY CLASS_CODE ASC
		    ) CC
    </select>

    <select id="GET_CC_LIST_EXCEL" parameterType="map" resultType="map">
        /* 클래스코드 리스트 엑셀 출력 */
        SELECT
        	ROWNUM,
        	CC.CLASS_CODE,
        	CC.CLASS_DESC,
        	CC.USE_YN
        FROM
	        (
		       SELECT 
		       		CLASS_CODE,
		       		CLASS_DESC,
		       		USE_YN
		       FROM 
		       		CODE_CLASS 
		    	<if test="searchKeyword != null and !''.equals(searchKeyword)">
					WHERE CLASS_DESC LIKE '%' || #{searchKeyword} || '%'
				</if>	
		    	ORDER BY CLASS_CODE ASC
		    ) CC
    </select>

    <select id="GET_CV_LIST" parameterType="map" resultType="map">
        /* 코드 리스트 조회 */
        SELECT
        	ROWNUM,
        	CV.ID,
        	CV.CODE,
        	CV.VALUE,
        	CV.CLASS_CODE,
        	CV.DEFAULT_YN,
        	CV.CODE_GROUP,
        	CV.USE_YN
       	FROM
	        (
		        SELECT 
		        	ID,
		        	CODE,
		        	VALUE,
		        	CLASS_CODE,
		        	
		        	DEFAULT_YN,
		        	CODE_GROUP,
		        	USE_YN
		        FROM 
		        	CODE_VALUE 
		     	<if test="class_code != null and !''.equals(class_code)">
					WHERE CLASS_CODE = #{class_code}
				</if>	
		     	ORDER BY CODE ASC
	     	) CV
    </select>

    <select id="GET_CV_LIST_EXCEL" parameterType="map" resultType="map">
        /* 코드 리스트 엑셀 출력 */
        SELECT
        	ROWNUM,
        	CV.ID,
        	CV.CODE,
        	CV.VALUE,
        	CV.CLASS_CODE,
        	CV.DEFAULT_YN,
        	CV.CODE_GROUP,
        	CV.USE_YN
       	FROM
	        (
		        SELECT 
		        	ID,
		        	CODE,
		        	VALUE,
		        	CLASS_CODE,
		        	
		        	DEFAULT_YN,
		        	CODE_GROUP,
		        	USE_YN
		        FROM 
		        	CODE_VALUE 
		     	<if test="class_code != null and !''.equals(class_code)">
					WHERE CLASS_CODE = #{class_code}
				</if>	
		     	ORDER BY CODE ASC
	     	) CV
    </select>

    <select id="GET_CC_INFO" parameterType="map" resultType="map">
        /* 클래스코드 정보 조회 */
        SELECT
        	*
        FROM 
        	CODE_CLASS 
      	WHERE	
      		CLASS_CODE = #{class_code} 
    </select>

    <select id="GET_CV_INFO" parameterType="map" resultType="map">
        /* 코드 정보 조회 */
        SELECT
        	*
        FROM 
        	CODE_VALUE 
      	WHERE	
      		id = #{id} 
    </select>

    <select id="GET_CC_CNT" parameterType="map" resultType="int">
        /* 클래스코드 중복조회 */
        SELECT
        	COUNT(1)
        FROM 
        	CODE_CLASS 
      	WHERE
      	    <if test="class_code != null">
	      		CLASS_CODE = #{class_code} 
      		</if>
      		<if test="update_class_code != null">
	      		CLASS_CODE = #{update_class_code} 
      		</if>
    </select>


    <update id="UPDATE_CC" parameterType="map">
        /* 클래스코드 수정 */
        UPDATE CODE_CLASS
           SET 
           	CLASS_CODE = #{update_class_code},
           	CLASS_DESC = #{update_class_desc},
           	USE_YN = #{update_use_yn}
       	WHERE
       		CLASS_CODE = #{class_code_id}
    </update>

    <delete id="DELETE_CC" parameterType="map">
        /* 클래스코드 삭제 */
        <choose>
        	<when test="class_code_id != null and !''.equals(class_code_id)">
				DELETE FROM
					CODE_CLASS
				WHERE
					CLASS_CODE = #{class_code_id}        	
        	</when>
        	<otherwise>
		        DELETE FROM
		        	CODE_CLASS
		        WHERE
		       		CLASS_CODE = #{class_code}
			</otherwise>
		</choose>
    </delete>

    <delete id="DELETE_CV_FROM_CC" parameterType="map">
        /* 클래스코드에 연관된 코드 삭제 */
        DELETE FROM
        	CODE_VALUE
         WHERE
       		CLASS_CODE = #{class_code}
    </delete>


    <update id="UPDATE_CV" parameterType="map">
        /* 코드 수정 */
        UPDATE CODE_VALUE
           SET
            <choose>
	        	<when test="class_code_id != null and !''.equals(class_code_id)">
		           		CLASS_CODE = #{update_class_code}
				</when>			
				<otherwise>
		           		CLASS_CODE = #{class_code},
		           		VALUE = #{value},
			           	CODE = #{code},
		           		CODE_GROUP = #{code_group},
		           		USE_YN = #{use_yn}
				</otherwise>
            </choose>
       	WHERE
		    <if test="class_code_id != null and !''.equals(class_code_id)">
	       		CLASS_CODE = #{class_code_id}
			</if>

			<if test="id != null and !''.equals(id)">
	       		ID = #{id}
			</if>
    </update>

    <delete id="DELETE_CV" parameterType="map">
        /* 코드 삭제 */
        DELETE FROM
        	CODE_VALUE
         WHERE
       		id = #{id}
    </delete>


    <insert id="INSERT_CC" parameterType="map">
        /* 클래스코드 입력 */
        <choose>
        	<when test="class_code_id != null and !''.equals(class_code_id)">
		        INSERT INTO CODE_CLASS(
		        	CLASS_CODE,
		        	CLASS_DESC,
		        	USE_YN
		        )
		        VALUES(
		        	#{update_class_code},
		        	#{update_class_desc},
		        	#{update_use_yn}
		        )
        	</when>
	        <otherwise>
		        INSERT INTO CODE_CLASS(
		        	CLASS_CODE,
		        	CLASS_DESC,
		        	USE_YN
		        )
		        VALUES(
		        	#{class_code},
		        	#{class_desc},
		        	#{use_yn}
		        )
	        </otherwise>
        </choose>
    </insert>

    <insert id="INSERT_CV" parameterType="map">
        /* 코드 입력 */
        INSERT INTO CODE_VALUE(
        	ID,
        	CLASS_CODE,
        	VALUE,
        	CODE,
        	CODE_GROUP,
        	USE_YN
        )
        VALUES(
        	CLIV_SEQ.NEXTVAL,
        	#{class_code},
        	#{value},
        	#{code},
        	#{code_group},
        	#{use_yn}
        )
    </insert>


	<!-- clivCMS 추가 -->
	
    <select id="GET_CODE_LIST" parameterType="map" resultType="map">
        /* 시스템 코드 리스트 조회 */
        SELECT ID, CODE, VALUE, CLASS_CODE, DEFAULT_YN, CODE_GROUP
          FROM CODE_VALUE
        WHERE CLASS_CODE = #{class_code}
        ORDER BY DEFAULT_YN, VALUE ASC
<!--       ORDER BY DEFAULT_YN, VALUE DESC -->
    </select>

    <select id="GET_CLASS_CODE_LIST" parameterType="map" resultType="map">
        /* 시스템 코드 구분 리스트 조회 */
        SELECT CLASS_CODE, CLASS_DESC
          FROM CODE_CLASS 
     	ORDER BY CLASS_CODE ASC
    </select>

    <select id="GET_CODE_VALUE" parameterType="map" resultType="string">
        /* 시스템 코드값 조회 */
        SELECT VALUE
          FROM CODE_VALUE
         WHERE CLASS_CODE  = #{class_code}
           AND CODE = #{code}
    </select>
    
    <select id="GET_LIB_GUBUN_LIST" resultType="map">
        /* 도서관 구분 리스트  조회 */
        SELECT UP_LIB_GUBUN, LIB_GUBUN, LIB_GUBUN_NM, LIB_BUNRU_CD 
		  FROM MCST_LIB_TYPE
		 WHERE UP_LIB_GUBUN != '00000000000'
	  	ORDER BY LIB_GUBUN
    </select>
    
    <select id="GET_LOCAL_DEAIL_LIST" parameterType="map" resultType="map">
		/* 상세지역 코드 리스트 조회 */
        SELECT LOCAL_CODE, ADD1, ADDR, SUBSTR(MAX(LPAD(LEVEL, 2)||SYS_CONNECT_BY_PATH(ZIP_CODE, ',')), 4) ZIP_CODE
        FROM
            (
                SELECT
                    LOCAL_CODE, ADD1, DECODE(INSTR(ADD2, ' '), 0, ADD2, SUBSTR(ADD2, 1, INSTR(ADD2, ' ')-1)) ADDR,
                    GUBUN||':'||ZIP_CODE AS ZIP_CODE,
                    ROW_NUMBER() OVER(PARTITION BY DECODE(INSTR(ADD2, ' '), 0, ADD2, SUBSTR(ADD2, 1, INSTR(ADD2, ' ')-1)) ORDER BY ZIP_CODE) RN
                FROM MCST_CITY_SEARCH_ZIPCODE
                WHERE
                    LOCAL_CODE = #{lib_area}
                  AND
                    ZIP_CODE != #{lib_area}
            )
        CONNECT BY PRIOR RN = RN-1
               AND
            PRIOR ADDR = ADDR
        GROUP BY LOCAL_CODE, ADD1, ADDR
        ORDER BY LOCAL_CODE, ZIP_CODE
    </select>
    
    <select id="GET_DEADLINE_GUBUN_LIST" resultType="map">
        /* 마감 구분 리스트  조회 */
        SELECT GBN AS DEADLINE_GUBUN, 
        	(CASE
        		WHEN GBN = '1' THEN '통계마감관리'
	            WHEN GBN = '2' THEN '평가마감관리'
	            WHEN GBN = '3' THEN '평가자 평가기간관리'
	            WHEN GBN = '4' THEN '실사자 평가기간관리'
	            WHEN GBN = '5' THEN '이의신청 기간관리'
	    	END) AS DEADLINE_GUBUN_NM
		FROM MCST_CLOSING
		GROUP BY GBN
	  	ORDER BY GBN
    </select>
</mapper>